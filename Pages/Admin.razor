@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Admin Area</h3>

<div class="tw-m-4">
    <h4>Add New User</h4>
    <EditForm Model="newUser" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="tw-mb-4">
            <label class="tw-block">Name</label>
            <InputText @bind-Value="newUser.Name" class="tw-border tw-p-2 tw-w-full" />
        </div>
        <div class="tw-mb-4">
            <label class="tw-block">Email</label>
            <InputText @bind-Value="newUser.Email" class="tw-border tw-p-2 tw-w-full" />
        </div>
        <div class="tw-mb-4">
            <label class="tw-block">Phone Number</label>
            <InputText @bind-Value="newUser.PhoneNo" class="tw-border tw-p-2 tw-w-full" />
        </div>
        <div class="tw-mb-4">
            <label class="tw-block">Role</label>
            <InputText @bind-Value="newUser.Role" class="tw-border tw-p-2 tw-w-full" />
        </div>
        <button type="submit" class="tw-bg-blue-500 tw-text-white tw-p-2 tw-rounded">Add User</button>
    </EditForm>
</div>

<div class="tw-m-4">
    <h4>Users</h4>
    @if (users != null)
    {
        <table class="tw-w-full tw-border-collapse tw-border tw-border-gray-300">
            <thead>
                <tr class="tw-bg-gray-100">
                    <th class="tw-border tw-p-2">Name</th>
                    <th class="tw-border tw-p-2">Email</th>
                    <th class="tw-border tw-p-2">Phone</th>
                    <th class="tw-border tw-p-2">Role</th>
                    <th class="tw-border tw-p-2">Created</th>
                    <th class="tw-border tw-p-2">Updated</th>
                    <th class="tw-border tw-p-2">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td class="tw-border tw-p-2">@user.Name</td>
                        <td class="tw-border tw-p-2">@user.Email</td>
                        <td class="tw-border tw-p-2">@user.PhoneNo</td>
                        <td class="tw-border tw-p-2">@user.Role</td>
                        <td class="tw-border tw-p-2">@ToSAST(user.CreatedDate).ToString("g")</td>
                        <td class="tw-border tw-p-2">@ToSAST(user.UpdatedDate).ToString("g")</td>
                        <td class="tw-border tw-p-2">
                            <button @onclick="() => EditUser(user)" class="tw-bg-yellow-500 tw-text-white tw-p-1 tw-rounded tw-mr-2">Edit</button>
                            <button @onclick="() => DeleteUser(user.Id)" class="tw-bg-red-500 tw-text-white tw-p-1 tw-rounded">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading users...</p>
    }
</div>

@if (editingUser != null)
{
    <div class="tw-m-4">
        <h4>Edit User</h4>
        <EditForm Model="editingUser" OnValidSubmit="HandleEditSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="tw-mb-4">
                <label class="tw-block">Name</label>
                <InputText @bind-Value="editingUser.Name" class="tw-border tw-p-2 tw-w-full" />
            </div>
            <div class="tw-mb-4">
                <label class="tw-block">Email</label>
                <InputText @bind-Value="editingUser.Email" class="tw-border tw-p-2 tw-w-full" />
            </div>
            <div class="tw-mb-4">
                <label class="tw-block">Phone Number</label>
                <InputText @bind-Value="editingUser.PhoneNo" class="tw-border tw-p-2 tw-w-full" />
            </div>
            <div class="tw-mb-4">
                <label class="tw-block">Role</label>
                <InputText @bind-Value="editingUser.Role" class="tw-border tw-p-2 tw-w-full" />
            </div>
            <button type="submit" class="tw-bg-green-500 tw-text-white tw-p-2 tw-rounded">Save</button>
            <button @onclick="() => editingUser = null" class="tw-bg-gray-500 tw-text-white tw-p-2 tw-rounded tw-ml-2">Cancel</button>
        </EditForm>
    </div>
}

@code {
    private AppUser newUser = new();
    private List<AppUser> users;
    private AppUser editingUser;
    private HttpClient _httpClient => HttpFactory.CreateClient("AppUsersApi");
    private static readonly TimeZoneInfo SAST = TimeZoneInfo.FindSystemTimeZoneById(
        OperatingSystem.IsWindows() ? "South Africa Standard Time" : "Africa/Johannesburg");

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await _httpClient.GetAsync("api/appusers");

            // Log the full response
            await JS.InvokeVoidAsync("console.log", $"Status: {response.StatusCode}");
            var content = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("console.log", $"Response content: {content}");

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<AppUser>>();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading users: {ex.Message}");
            if (ex.InnerException != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Inner exception: {ex.InnerException.Message}");
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/appusers", newUser);
            await JS.InvokeVoidAsync("console.log", $"Post Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                newUser = new AppUser();
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error creating user: {ex.Message}");
        }
    }

    private void EditUser(AppUser user)
    {
        editingUser = new AppUser
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                PhoneNo = user.PhoneNo,
                Role = user.Role,
                CreatedDate = user.CreatedDate,
                UpdatedDate = user.UpdatedDate
            };
    }

    private async Task HandleEditSubmit()
    {
        try
        {
            var response = await _httpClient.PutAsJsonAsync($"api/appusers/{editingUser.Id}", editingUser);
            await JS.InvokeVoidAsync("console.log", $"Put Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                editingUser = null;
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error updating user: {ex.Message}");
        }
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"api/appusers/{id}");
            await JS.InvokeVoidAsync("console.log", $"Delete Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error deleting user: {ex.Message}");
        }
    }

    private DateTime ToSAST(DateTime utcDate)
    {
        return TimeZoneInfo.ConvertTimeFromUtc(utcDate, SAST);
    }
}