@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="tw-min-h-screen tw-bg-gray-100 tw-py-6">
    <div class="tw-max-w-5xl tw-mx-auto">
        <h3 class="tw-text-2xl tw-font-bold tw-mb-6 tw-text-gray-800">Admin Area</h3>

        <div class="tw-bg-white tw-shadow tw-rounded-lg tw-p-6 tw-mb-6">
            <UserForm User="newUser" OnSubmit="HandleSubmit" />
        </div>

        <div class="tw-bg-white tw-shadow tw-rounded-lg tw-p-6">
            <h4 class="tw-text-xl tw-font-semibold tw-mb-4 tw-text-gray-700">Users</h4>
            @if (users != null)
            {
                <table class="tw-w-full tw-border-collapse tw-border tw-border-gray-300">
                    <thead>
                        <tr class="tw-bg-gray-100">
                            <th class="tw-border tw-p-2 tw-text-left">Name</th>
                            <th class="tw-border tw-p-2 tw-text-left">Email</th>
                            <th class="tw-border tw-p-2 tw-text-left">Phone</th>
                            <th class="tw-border tw-p-2 tw-text-left">Role</th>
                            <th class="tw-border tw-p-2 tw-text-left">Created</th>
                            <th class="tw-border tw-p-2 tw-text-left">Updated</th>
                            <th class="tw-border tw-p-2 tw-text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr class="hover:tw-bg-gray-50 tw-transition-colors tw-duration-150">
                                <td class="tw-border tw-p-2">@user.Name</td>
                                <td class="tw-border tw-p-2">@user.Email</td>
                                <td class="tw-border tw-p-2">@user.PhoneNo</td>
                                <td class="tw-border tw-p-2">@user.Role</td>
                                <td class="tw-border tw-p-2">@ToSAST(user.CreatedDate).ToString("g")</td>
                                <td class="tw-border tw-p-2">@ToSAST(user.UpdatedDate).ToString("g")</td>
                                <td class="tw-border tw-p-2">
                                    <div class="tw-flex tw-space-x-2">
                                        <button @onclick="() => EditUser(user)"
                                                class="tw-bg-yellow-500 tw-text-white tw-font-medium tw-py-1 tw-px-3 tw-rounded
                                                       hover:tw-bg-yellow-600 tw-transition-all tw-duration-200
                                                       hover:tw-shadow-md active:tw-transform active:tw-scale-95">
                                            Edit
                                        </button>
                                        <button @onclick="() => DeleteUser(user.Id)"
                                                class="tw-bg-red-500 tw-text-white tw-font-medium tw-py-1 tw-px-3 tw-rounded
                                                       hover:tw-bg-red-600 tw-transition-all tw-duration-200
                                                       hover:tw-shadow-md active:tw-transform active:tw-scale-95">
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="tw-text-gray-500">Loading users...</p>
            }
        </div>

        @if (editingUser != null)
        {
            <UserForm User="editingUser"
                      Title="Edit User"
                      SubmitButtonText="Save"
                      SubmitButtonColor="green"
                      ShowCancelButton="true"
                      OnSubmit="HandleEditSubmit"
                      OnCancel="CancelEdit" />
        }
    </div>
</div>

@code {
    private AppUser newUser = new();
    private List<AppUser> users;
    private AppUser editingUser;
    private HttpClient _httpClient => HttpFactory.CreateClient("AppUsersApi");
    private static readonly TimeZoneInfo SAST = TimeZoneInfo.FindSystemTimeZoneById(
        OperatingSystem.IsWindows() ? "South Africa Standard Time" : "Africa/Johannesburg");

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await _httpClient.GetAsync("api/appusers");

            // Log the full response
            await JS.InvokeVoidAsync("console.log", $"Status: {response.StatusCode}");
            var content = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("console.log", $"Response content: {content}");

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<AppUser>>();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading users: {ex.Message}");
            if (ex.InnerException != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Inner exception: {ex.InnerException.Message}");
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/appusers", newUser);
            await JS.InvokeVoidAsync("console.log", $"Post Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                newUser = new AppUser();
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error creating user: {ex.Message}");
        }
    }

    private void EditUser(AppUser user)
    {
        editingUser = new AppUser
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                PhoneNo = user.PhoneNo,
                Role = user.Role,
                CreatedDate = user.CreatedDate,
                UpdatedDate = user.UpdatedDate
            };
    }

    private async Task HandleEditSubmit()
    {
        try
        {
            var response = await _httpClient.PutAsJsonAsync($"api/appusers/{editingUser.Id}", editingUser);
            await JS.InvokeVoidAsync("console.log", $"Put Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                editingUser = null;
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error updating user: {ex.Message}");
        }
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"api/appusers/{id}");
            await JS.InvokeVoidAsync("console.log", $"Delete Status: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error deleting user: {ex.Message}");
        }
    }

    private Task CancelEdit()
    {
        editingUser = null;
        return Task.CompletedTask;
    }

    private DateTime ToSAST(DateTime utcDate)
    {
        return TimeZoneInfo.ConvertTimeFromUtc(utcDate, SAST);
    }
}